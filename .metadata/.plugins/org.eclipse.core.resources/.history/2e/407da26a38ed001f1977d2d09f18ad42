package br.com.hcm.ApiRestControleDeContatos.controller;

import java.util.List;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.com.hcm.ApiRestControleDeContatos.dto.PessoaDto;
import br.com.hcm.ApiRestControleDeContatos.model.Pessoas;
import br.com.hcm.ApiRestControleDeContatos.service.PessoaService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import io.swagger.v3.oas.annotations.responses.ApiResponse;

@RestController
@RequestMapping("/api/pessoas") // http://localhost:8080/api/pessoas
public class PessoasController {

	@Autowired
	private PessoaService pessoaService;

	@Operation(summary = "Este endpoint adiciona uma nova pessoa ao banco de dados.")
	@PostMapping // POST http://localhost:8080/api/pessoas
	public ResponseEntity<Pessoas> save(@RequestBody Pessoas pessoa) {
		Pessoas newPessoa = pessoaService.save(pessoa);
		return ResponseEntity.ok(newPessoa);
	}

	@Operation(summary = "Este endpoint retorna todas as pessoas que estão no banco de dados.")
	@GetMapping // GET http://localhost:8080/api/pessoas
	public ResponseEntity<List<Pessoas>> findAll() {
		List<Pessoas> pessoas = pessoaService.findAll();
		return ResponseEntity.ok(pessoas);
	}

	@Operation(summary = "Buscar uma pessoa por ID", description = "Endpoint para buscar uma pessoa pelo ID", responses = {
			@ApiResponse(responseCode = "200", description = "Pessoa encontrada", content = @Content(mediaType = "application/json", examples = @ExampleObject(value = "{\n"
					+ "  \"id\": 1,\n" + "  \"nome\": \"João Silva\",\n" + "  \"endereco\": \"Rua das Flores, 123\",\n"
					+ "  \"cep\": \"12345-678\",\n" + "  \"cidade\": \"São Paulo\",\n" + "  \"uf\": \"SP\"\n"
					+ "}"))) })

	@GetMapping("/{id}") // GET http://localhost:8080/api/pessoas/{id}
	public ResponseEntity<Optional<Pessoas>> findById(@PathVariable Long id) {
		Optional<Pessoas> pessoa = pessoaService.findById(id);
		return ResponseEntity.ok(pessoa);
	}

	@Operation(summary = "Este endpoint retorna uma pessoa através do id informado e devolve somente [nome, endereço, cep, cidade e uf].")
	@GetMapping("/maladireta/{id}") // GET http://localhost:8080/api/pessoas/maladireta/{id}
	public ResponseEntity<Optional<PessoaDto>> malaDireta(@PathVariable Long id) {
		Optional<PessoaDto> pessoaDto = pessoaService.findByIdMalaDireta(id);
		return ResponseEntity.ok(pessoaDto);

	}

	@Operation(summary = "Este endpoint atualiza os dados da pessoa, deve ser informado o id e a pessoa deve existir no banco de dados!")
	@PutMapping("/{id}") // PUT http://localhost:8080/api/pessoas/{id}
	public ResponseEntity<Pessoas> update(@PathVariable Long id, @RequestBody Pessoas pessoa) {
		Pessoas upPessoa = pessoaService.update(pessoa);
		return ResponseEntity.ok(upPessoa);
	}

	@Operation(summary = "Este endpoint deleta os dados da pessoa no banco de dados apartir do id informado.")
	@DeleteMapping("/{id}") // DELETE http://localhost:8080/api/pessoas/{id}
	public ResponseEntity<Void> delete(@PathVariable Long id) {
		if (!pessoaService.findById(id).isPresent())
			return ResponseEntity.notFound().build();
		pessoaService.delete(id);
		return ResponseEntity.noContent().build();
	}
}
